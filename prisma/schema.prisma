generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  phone         String?   @unique
  address       String?
  city          String?
  country       String?
  website       String?
  taxId         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  inventory     Inventory[]
  product       Product[]
  purchaseOrder PurchaseOrder[]
  supplier      Supplier[]
  payment       Payment[]
  documentSO      DocumentSO[]
  customer      Customer[]
}

model Inventory {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Int      @default(0)
  location    String?
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name        String
  imageUrl    String?
  description String?
  price       Float
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  inventory   Inventory?
}

model PurchaseOrder {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplierId  String
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  items       Json?
  total       Float
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Supplier {
  id            String   @id @default(cuid())
  companyId     String
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name          String
  email         String   @unique
  phone         String?
  address       String?
  city          String?
  country       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  purchaseOrder PurchaseOrder[]
}

model Payment {
  id          String   @id @default(cuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  documentSoId   String
  DocumentSO     DocumentSO  @relation(fields: [documentSoId], references: [id], onDelete: Cascade)
  amount      Float
  method      String
  status      String   @default("pending")
  paidAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentSO {
  id            String   @id @default(cuid())
  removed       Boolean  @default(false)
  converted     Boolean  @default(false)
  date          DateTime @default(now())
  expiredDate   DateTime @default(now())
  customerId    String?
  customer      Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  companyId     String?
  company       Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  items         Json?
  taxRate       Float    @default(0)
  subTotal      Float
  taxTotal      Float    @default(0)
  total         Float
  credit        Float    @default(0)
  discount      Float    @default(0)
  status        String   @default("draft")
  type          DocumentType @default(QUOTE)
  approved      Boolean  @default(false)
  createdDate   DateTime @default(now())
  updatedDate   DateTime @updatedAt

  payemnt Payment[]
}

model Customer {
   id          String     @id @default(cuid())
  companyId   String
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name        String
  email       String     @unique
  phone       String?    @unique
  address     String?
  city        String?
  country     String?
  fromCompany String?
  jobTitle    String?
  source      SourceLead @default(OTHER)
  customerType CustomerType
  customField Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  documentSO   DocumentSO[]
}

enum DocumentType {
  QUOTE
  SO
  INV
}

enum CustomerType {
  LEADS
  CUSTOMER
}
enum SourceLead {
  WEBSITE
  GOOGLE
  SOSMED
  EVENT
  REFERRAL
  LEADS
  OTHER
}
